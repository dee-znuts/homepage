---
import { Image } from 'astro:assets';
import type { ImageMetadata } from 'astro';
import ComputerDesktop from '@/assets/svg/computer-desktop.svg';
import FaceSmile from '@/assets/svg/face-smile.svg';
import Badge from '@/components/Badge.astro';
import CTAButton from '@/components/CTAButton.astro';
import Peanut from '@/components/Peanut.astro';
import Layout from '@/layouts/Layout.astro';

// NOTE(louisescher): This a maximum of 10 memes. I couldn't be bothered to make a client-side dynamic thingy.
// Writing this off in the name of artistic expression or something.
const memes = import.meta.glob<{ default: ImageMetadata }>('../assets/memes/*', { eager: true });
const memeEntries = Object.entries(memes);

if (memeEntries.length > 10) {
	throw new Error('Lou was too lazy. 10 memes or less please');
}

const data = [
	{ left: 0, top: 10, scale: 0.75, speed: 1 },
	{ left: -10, top: 85, scale: 0.85, speed: 1.25 },
	{ left: 25, top: 75, scale: 0.55, speed: 2 },
	{ left: 75, top: 25, scale: 1, speed: 0.67 },
	{ left: 47, top: 70, scale: 0.6, speed: 0.75 },
	{ left: 67, top: 110, scale: 0.95, speed: 2.5 },
	{ left: 15, top: 25, scale: 0.75, speed: 1.5 },
	{ left: 78, top: 80, scale: 0.71, speed: 0.95 },
	{ left: -5, top: 100, scale: 0.58, speed: 1.25 },
	{ left: 50, top: 55, scale: 0.69 /* Nice */, speed: 0.85 },
];

const memesWithData = memeEntries.map(([name, meme], i) => ({
	...data[i],
	image: meme.default,
	name: name.split('/').pop()!,
}));
---

<Layout title="DEE-ZNUTS">
	<section class="hero">
		<div class="hero-text">
			<!-- TODO: Make modifiable via content collection -->
			<Badge text="Unlimited Lang Works out now!" href="/work/unlimited-lang-works" />
			<h1>
				{"Making completely useless Integrations for".split("").map((letter) => (
					<span class="letter">{letter}</span>
				))}
				<span class="serif italic">
					{"shits and giggles".split("").map((letter) => (
						<span class="letter">{letter}</span>
					))}
				</span>
			</h1>
			<p>The <strong>Domain Expansion Extendable Zoomers-Notoriety Unification Tech Summit</strong> strives every day to bring the Astro community the worst integrations you can think of.</p>
			<CTAButton text="Read more" chevronDir="down" />
		</div>
		<Peanut />
	</section>
	<section class="stupid-questions">
		<div class="section-header">
			<Badge text="Anime References Galore">
				<ComputerDesktop width={24} height={24} />
			</Badge>
			<h2 id="stupid-questions-header">
				{"We ask".split("").map((letter) => (
					<span class="letter">{letter}</span>
				))}
				<span class="serif italic">
					{"stupid questions".split("").map((letter) => (
						<span class="letter">{letter}</span>
					))}
				</span>
			</h2>
		</div>
		<div class="questions-container">
			<div class="question">
				<div class="section-header">
					<span>Domain Expansion</span>
					<h3>What if Astro had <span class="serif">incremental builds</span>?</h3>
				</div>
				<p>An integration that allows you to cache parts of your Astro build for the next run. Works on Netlify, Vercel and NodeJS. You probably shouldn't use this.</p>
				<CTAButton text="I want to anyways" chevronDir="right" />
			</div>
			<div class="question">
				<div class="section-header">
					<span>Ultimate Lang Works</span>
					<h3>What if you could write <span class="serif">Rust in Astro</span>?</h3>
				</div>
				<p>An integration that allows you to write Rust, Python, Go and many more languages inside the Astro frontmatter. You probably shouldn't use this either.</p>
				<CTAButton text="Don't care, let me try" chevronDir="right" />
			</div>
		</div>
	</section>
	<section class="stupid-memes">
		<div class="section-header centered">
			<Badge text="Why yes we do know we're very funny thank you">
				<FaceSmile width={24} height={24} />
			</Badge>
			<h2 id="stupid-memes-header">
				{"We make".split("").map((letter) => (
					<span class="letter">{letter}</span>
				))}
				<span class="serif italic">
					{"stupid memes".split("").map((letter) => (
						<span class="letter">{letter}</span>
					))}
				</span>
			</h2>
		</div>
		<div class="meme-parallax">
			{memesWithData.map(({ left, top, scale, speed, image, name }) => {
				return (
					<Image
						src={image}
						alt={name}
						inferSize
						data-speed={speed}
						data-top={top}
						class={"meme"}
						style={`left: ${left}%; top: ${top}%; transform: scale(${scale});`}
					/>
				);
			})}
		</div>
	</section>
	<section class="peanut-joke">
		<div>
			<span>Did you know that a peanut<br><span class="serif">isn't a nut?</span></span>
		</div>
		<div>
			<span>It's actually a<br><span class="serif">legume</span></span>
		</div>
		<div>
			<span>So technically, <span class="serif">deez</span> would be more fitting <span class="serif italic">(gottem)</span></span>
		</div>
	</section>
	<section class="amazing-reviews">
		<div class="section-header">
			<Badge text="Yes we did just change color palette I'm so glad you asked">
				<ComputerDesktop width={24} height={24} />
			</Badge>
			<h2>We get <span class="serif italic">amazing reviews</span></h2>
		</div>
		<div class="questions-container">
			<div class="question">
				<div class="section-header">
					<span>Domain Expansion</span>
					<h3>What if Astro had <span class="serif">incremental builds</span>?</h3>
				</div>
				<p>An integration that allows you to cache parts of your Astro build for the next run. Works on Netlify, Vercel and NodeJS. You probably shouldn't use this.</p>
				<CTAButton text="I want to anyways" chevronDir="right" />
			</div>
			<div class="question">
				<div class="section-header">
					<span>Ultimate Lang Works</span>
					<h3>What if you could write <span class="serif">Rust in Astro</span>?</h3>
				</div>
				<p>An integration that allows you to write Rust, Python, Go and many more languages inside the Astro frontmatter. You probably shouldn't use this either.</p>
				<CTAButton text="Don't care, let me try" chevronDir="right" />
			</div>
		</div>
	</section>
</Layout>
<script>
import { gsap } from 'gsap';
import { ScrollTrigger } from "gsap/ScrollTrigger";

const header = document.querySelector<HTMLElement>("h1")!;

gsap.registerPlugin(ScrollTrigger);

const headerAnim = gsap.from(header.querySelectorAll("span.letter"), {
  opacity: 0,
  y: 150,
  duration: .25,
  stagger: 0.05,
  top: 20,
  paused: true,
});

document.addEventListener("site-loaded", () => {
 	setTimeout(() => headerAnim.play(), 250);
});

const selectors = [
 	'stupid-questions',
  'stupid-memes'
];

for (const selector of selectors) {
	gsap.from(document.querySelectorAll(`#${selector}-header .letter`), {
		scrollTrigger: {
			trigger: document.querySelector(`.${selector}`),
      start: "top 70%",
      // scrub: true,
    },
    opacity: 0,
    y: 150,
    duration: .25,
    stagger: 0.05,
    top: 20,
	});
}
</script>
<script>
document.addEventListener("DOMContentLoaded", () => {
	const memes = document.querySelectorAll<HTMLImageElement>(".meme");
	const memesSection = document.querySelector<HTMLElement>(".stupid-memes")!;
	const memesBoundingRect = memesSection.getBoundingClientRect();
	const memesCenter = memesBoundingRect.bottom - memesBoundingRect.top;

	document.addEventListener("scroll", () => {
		const scroll = document.documentElement.scrollTop || document.body.scrollTop;
		const adjustedScroll = scroll - memesCenter;

		if (adjustedScroll < 0) return;

		memes.forEach((meme) => {
			const { speed, top } = meme.dataset;

			console.log(adjustedScroll / 100);
			meme.style.top = `${Number.parseInt(top!, 10) -(adjustedScroll / 50) * Number.parseFloat(speed!)}%`;
		});
	});
});
</script>
<style>
	.hero {
		padding: 0 8rem;
		padding-top: 8vh;
		padding-bottom: 4rem;
		display: flex;
		background: var(--background-light);
		align-items: center;
		justify-content: space-between;
	}

	@media screen and (max-height: 1000px) {
		.hero {
			padding-top: .5rem;
		}
	}

	.hero-text {
		width: calc(50% - 4rem);
		min-width: 840px;
		display: flex;
		flex-direction: column;
		gap: 3rem;
		padding: 16vh 0;
	}

	h1 {
		font-size: 90px;
		margin: 0;
	}

	.letter {
		position: relative;
	}

	.hero-text p {
		font-size: 1.5em;
	}

	h2 {
		font-size: 4em;
		margin: 0;
	}

	h3 {
		font-size: 2.5em;
		margin: 0;
	}

	.stupid-questions {
		padding: 4rem 8rem;
		padding-bottom: 4rem;
	}

	.stupid-questions {
		background: var(--background-light);
	}

	.section-header {
		display: flex;
		flex-direction: column;
		gap: .5rem;
		margin-bottom: 2rem;
	}

	.section-header.centered {
		align-items: center;
	}

	.questions-container {
		display: flex;
		flex-direction: row;
		gap: 2rem;
	}

	.section-header span {
		font-size: 1.25em;
	}

	.question {
		background-color: white;
		display: flex;
		flex-direction: column;
		gap: 1rem;
		padding: 3rem;
		border-radius: 2rem;
	}

	.question p {
		font-size: 1.25em;
	}

	.question .section-header {
		margin: 0;
	}

	.stupid-memes {
		background-image: linear-gradient(to bottom, var(--background-light), var(--background-light-2));
		max-width: 100vw;
		overflow: hidden;
		padding-bottom: 20rem;
		padding-top: 8rem;
	}

	.meme-parallax {
		height: 75vh;
		max-width: 100vw;
		position: relative;
	}

	.meme {
		position: absolute;
		border-radius: 2rem;
		box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.125);
	}

	.peanut-joke {
		background-color: var(--background-light-2);
		width: 100vw;
		display: flex;
		flex-direction: column;
		gap: 24rem;
		font-size: 5em;
		padding-top: 24rem;
		color: white;
		font-weight: 100;
	}

	.peanut-joke > div {
		width: 50vw;
		display: flex;
		align-items: center;
		justify-content: center;
		text-align: center;
		margin-left: auto;
		padding: 0 10rem;
	}

	.amazing-reviews {
		color: white;
		padding-top: 16rem;
		background-image: linear-gradient(to bottom, var(--background-light-2) 0%, var(--background-light-3) 50%, var(--background-light-3) 100%);
	}
</style>
